// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: single_user_online.proto

#include "single_user_online.pb.h"
#include "single_user_online.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace singleuseronline {

static const char* SingleUserOnline_method_names[] = {
  "/singleuseronline.SingleUserOnline/signUp",
  "/singleuseronline.SingleUserOnline/keepAliveStream",
  "/singleuseronline.SingleUserOnline/keepAliveShort",
};

std::unique_ptr< SingleUserOnline::Stub> SingleUserOnline::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SingleUserOnline::Stub> stub(new SingleUserOnline::Stub(channel));
  return stub;
}

SingleUserOnline::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_signUp_(SingleUserOnline_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_keepAliveStream_(SingleUserOnline_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_keepAliveShort_(SingleUserOnline_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SingleUserOnline::Stub::signUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_signUp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* SingleUserOnline::Stub::AsyncsignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::singleuseronline::ResultInfo>::Create(channel_.get(), cq, rpcmethod_signUp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* SingleUserOnline::Stub::PrepareAsyncsignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::singleuseronline::ResultInfo>::Create(channel_.get(), cq, rpcmethod_signUp_, context, request, false);
}

::grpc::ClientReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* SingleUserOnline::Stub::keepAliveStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>::Create(channel_.get(), rpcmethod_keepAliveStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* SingleUserOnline::Stub::AsynckeepAliveStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>::Create(channel_.get(), cq, rpcmethod_keepAliveStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* SingleUserOnline::Stub::PrepareAsynckeepAliveStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>::Create(channel_.get(), cq, rpcmethod_keepAliveStream_, context, false, nullptr);
}

::grpc::Status SingleUserOnline::Stub::keepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_keepAliveShort_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* SingleUserOnline::Stub::AsynckeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::singleuseronline::ResultInfo>::Create(channel_.get(), cq, rpcmethod_keepAliveShort_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* SingleUserOnline::Stub::PrepareAsynckeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::singleuseronline::ResultInfo>::Create(channel_.get(), cq, rpcmethod_keepAliveShort_, context, request, false);
}

SingleUserOnline::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SingleUserOnline_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SingleUserOnline::Service, ::singleuseronline::LoginInfo, ::singleuseronline::ResultInfo>(
          std::mem_fn(&SingleUserOnline::Service::signUp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SingleUserOnline_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SingleUserOnline::Service, ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>(
          std::mem_fn(&SingleUserOnline::Service::keepAliveStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SingleUserOnline_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SingleUserOnline::Service, ::singleuseronline::LoginInfo, ::singleuseronline::ResultInfo>(
          std::mem_fn(&SingleUserOnline::Service::keepAliveShort), this)));
}

SingleUserOnline::Service::~Service() {
}

::grpc::Status SingleUserOnline::Service::signUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SingleUserOnline::Service::keepAliveStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SingleUserOnline::Service::keepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace singleuseronline

