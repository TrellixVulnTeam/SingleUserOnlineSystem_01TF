// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: single_user_online.proto
#ifndef GRPC_single_5fuser_5fonline_2eproto__INCLUDED
#define GRPC_single_5fuser_5fonline_2eproto__INCLUDED

#include "single_user_online.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace singleuseronline {

class SingleUserOnline final {
 public:
  static constexpr char const* service_full_name() {
    return "singleuseronline.SingleUserOnline";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // sign up a new account
    virtual ::grpc::Status SignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> AsyncSignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(AsyncSignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> PrepareAsyncSignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(PrepareAsyncSignUpRaw(context, request, cq));
    }
    // logout
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> AsyncLogout(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    // live-statue, stream to stream
    std::unique_ptr< ::grpc::ClientWriterInterface< ::singleuseronline::LoginInfo>> KeepAliveStream(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::singleuseronline::LoginInfo>>(KeepAliveStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::singleuseronline::LoginInfo>> AsyncKeepAliveStream(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::singleuseronline::LoginInfo>>(AsyncKeepAliveStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::singleuseronline::LoginInfo>> PrepareAsyncKeepAliveStream(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::singleuseronline::LoginInfo>>(PrepareAsyncKeepAliveStreamRaw(context, response, cq));
    }
    // live-statue, short connection
    virtual ::grpc::Status KeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> AsyncKeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(AsyncKeepAliveShortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> PrepareAsyncKeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(PrepareAsyncKeepAliveShortRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* AsyncSignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::singleuseronline::LoginInfo>* KeepAliveStreamRaw(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::singleuseronline::LoginInfo>* AsyncKeepAliveStreamRaw(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::singleuseronline::LoginInfo>* PrepareAsyncKeepAliveStreamRaw(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* AsyncKeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* PrepareAsyncKeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> AsyncSignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(AsyncSignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> PrepareAsyncSignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(PrepareAsyncSignUpRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> AsyncLogout(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::singleuseronline::LoginInfo>> KeepAliveStream(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::singleuseronline::LoginInfo>>(KeepAliveStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::singleuseronline::LoginInfo>> AsyncKeepAliveStream(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::singleuseronline::LoginInfo>>(AsyncKeepAliveStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::singleuseronline::LoginInfo>> PrepareAsyncKeepAliveStream(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::singleuseronline::LoginInfo>>(PrepareAsyncKeepAliveStreamRaw(context, response, cq));
    }
    ::grpc::Status KeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> AsyncKeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(AsyncKeepAliveShortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> PrepareAsyncKeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(PrepareAsyncKeepAliveShortRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* AsyncSignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::singleuseronline::LoginInfo>* KeepAliveStreamRaw(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response) override;
    ::grpc::ClientAsyncWriter< ::singleuseronline::LoginInfo>* AsyncKeepAliveStreamRaw(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::singleuseronline::LoginInfo>* PrepareAsyncKeepAliveStreamRaw(::grpc::ClientContext* context, ::singleuseronline::ResultInfo* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* AsyncKeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* PrepareAsyncKeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SignUp_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_KeepAliveStream_;
    const ::grpc::internal::RpcMethod rpcmethod_KeepAliveShort_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // sign up a new account
    virtual ::grpc::Status SignUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response);
    // logout
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response);
    // live-statue, stream to stream
    virtual ::grpc::Status KeepAliveStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::singleuseronline::LoginInfo>* reader, ::singleuseronline::ResultInfo* response);
    // live-statue, short connection
    virtual ::grpc::Status KeepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignUp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignUp(::grpc::ServerContext* context, ::singleuseronline::LoginInfo* request, ::grpc::ServerAsyncResponseWriter< ::singleuseronline::ResultInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::singleuseronline::LoginInfo* request, ::grpc::ServerAsyncResponseWriter< ::singleuseronline::ResultInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KeepAliveStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KeepAliveStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_KeepAliveStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAliveStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::singleuseronline::LoginInfo>* reader, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeepAliveStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::singleuseronline::ResultInfo, ::singleuseronline::LoginInfo>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KeepAliveShort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KeepAliveShort() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_KeepAliveShort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeepAliveShort(::grpc::ServerContext* context, ::singleuseronline::LoginInfo* request, ::grpc::ServerAsyncResponseWriter< ::singleuseronline::ResultInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SignUp<WithAsyncMethod_Logout<WithAsyncMethod_KeepAliveStream<WithAsyncMethod_KeepAliveShort<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignUp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KeepAliveStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KeepAliveStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_KeepAliveStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAliveStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::singleuseronline::LoginInfo>* reader, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KeepAliveShort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KeepAliveShort() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_KeepAliveShort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignUp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::singleuseronline::LoginInfo, ::singleuseronline::ResultInfo>(std::bind(&WithStreamedUnaryMethod_SignUp<BaseClass>::StreamedSignUp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::singleuseronline::LoginInfo,::singleuseronline::ResultInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::singleuseronline::LoginInfo, ::singleuseronline::ResultInfo>(std::bind(&WithStreamedUnaryMethod_Logout<BaseClass>::StreamedLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::singleuseronline::LoginInfo,::singleuseronline::ResultInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KeepAliveShort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KeepAliveShort() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::singleuseronline::LoginInfo, ::singleuseronline::ResultInfo>(std::bind(&WithStreamedUnaryMethod_KeepAliveShort<BaseClass>::StreamedKeepAliveShort, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KeepAliveShort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KeepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKeepAliveShort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::singleuseronline::LoginInfo,::singleuseronline::ResultInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SignUp<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_KeepAliveShort<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SignUp<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_KeepAliveShort<Service > > > StreamedService;
};

}  // namespace singleuseronline


#endif  // GRPC_single_5fuser_5fonline_2eproto__INCLUDED
