// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from UserLogin.djinni

#import "UserLogin_UserLogin+Private.h"
#import "UserLogin_UserLogin.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "UserLogin_LoginStatusCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface UserLogin_UserLogin ()

- (id)initWithCpp:(const std::shared_ptr<::UserLogin::UserLogin>&)cppRef;

@end

@implementation UserLogin_UserLogin {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::UserLogin::UserLogin>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::UserLogin::UserLogin>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)signUp:(nonnull NSString *)userName
              pwd:(nonnull NSString *)pwd
         callback:(nullable UserLogin_LoginStatusCallback *)callback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sign_up(::djinni::String::toCpp(userName),
                                                           ::djinni::String::toCpp(pwd),
                                                           ::djinni_generated::LoginStatusCallback::toCpp(callback));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)login:(nonnull NSString *)userName
             pwd:(nonnull NSString *)pwd
        callback:(nullable UserLogin_LoginStatusCallback *)callback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->login(::djinni::String::toCpp(userName),
                                                         ::djinni::String::toCpp(pwd),
                                                         ::djinni_generated::LoginStatusCallback::toCpp(callback));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto UserLogin::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto UserLogin::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<UserLogin_UserLogin>(cpp);
}

}  // namespace djinni_generated

@end
