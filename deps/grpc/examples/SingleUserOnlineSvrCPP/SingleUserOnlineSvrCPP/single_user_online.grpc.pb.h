// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: single_user_online.proto
#ifndef GRPC_single_5fuser_5fonline_2eproto__INCLUDED
#define GRPC_single_5fuser_5fonline_2eproto__INCLUDED

#include "single_user_online.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace singleuseronline {

class SingleUserOnline final {
 public:
  static constexpr char const* service_full_name() {
    return "singleuseronline.SingleUserOnline";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // sign up a new account
    virtual ::grpc::Status signUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> AsyncsignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(AsyncsignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> PrepareAsyncsignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(PrepareAsyncsignUpRaw(context, request, cq));
    }
    // live-statue, stream to streamï¼› use status to logout or login
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>> keepAliveStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>>(keepAliveStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>> AsynckeepAliveStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>>(AsynckeepAliveStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>> PrepareAsynckeepAliveStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>>(PrepareAsynckeepAliveStreamRaw(context, cq));
    }
    // live-statue, short connection
    virtual ::grpc::Status keepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> AsynckeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(AsynckeepAliveShortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>> PrepareAsynckeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>>(PrepareAsynckeepAliveShortRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* AsyncsignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* PrepareAsyncsignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* keepAliveStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* AsynckeepAliveStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* PrepareAsynckeepAliveStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* AsynckeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::singleuseronline::ResultInfo>* PrepareAsynckeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status signUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> AsyncsignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(AsyncsignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> PrepareAsyncsignUp(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(PrepareAsyncsignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>> keepAliveStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>>(keepAliveStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>> AsynckeepAliveStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>>(AsynckeepAliveStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>> PrepareAsynckeepAliveStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>>(PrepareAsynckeepAliveStreamRaw(context, cq));
    }
    ::grpc::Status keepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::singleuseronline::ResultInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> AsynckeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(AsynckeepAliveShortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>> PrepareAsynckeepAliveShort(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>>(PrepareAsynckeepAliveShortRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* AsyncsignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* PrepareAsyncsignUpRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* keepAliveStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* AsynckeepAliveStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* PrepareAsynckeepAliveStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* AsynckeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::singleuseronline::ResultInfo>* PrepareAsynckeepAliveShortRaw(::grpc::ClientContext* context, const ::singleuseronline::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_signUp_;
    const ::grpc::internal::RpcMethod rpcmethod_keepAliveStream_;
    const ::grpc::internal::RpcMethod rpcmethod_keepAliveShort_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // sign up a new account
    virtual ::grpc::Status signUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response);
    // live-statue, stream to streamï¼› use status to logout or login
    virtual ::grpc::Status keepAliveStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* stream);
    // live-statue, short connection
    virtual ::grpc::Status keepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_signUp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsignUp(::grpc::ServerContext* context, ::singleuseronline::LoginInfo* request, ::grpc::ServerAsyncResponseWriter< ::singleuseronline::ResultInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_keepAliveStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_keepAliveStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_keepAliveStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keepAliveStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestkeepAliveStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_keepAliveShort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_keepAliveShort() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_keepAliveShort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestkeepAliveShort(::grpc::ServerContext* context, ::singleuseronline::LoginInfo* request, ::grpc::ServerAsyncResponseWriter< ::singleuseronline::ResultInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_signUp<WithAsyncMethod_keepAliveStream<WithAsyncMethod_keepAliveShort<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_signUp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_keepAliveStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_keepAliveStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_keepAliveStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keepAliveStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::singleuseronline::LoginInfo, ::singleuseronline::LoginInfo>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_keepAliveShort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_keepAliveShort() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_keepAliveShort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_signUp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::singleuseronline::LoginInfo, ::singleuseronline::ResultInfo>(std::bind(&WithStreamedUnaryMethod_signUp<BaseClass>::StreamedsignUp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status signUp(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsignUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::singleuseronline::LoginInfo,::singleuseronline::ResultInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_keepAliveShort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_keepAliveShort() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::singleuseronline::LoginInfo, ::singleuseronline::ResultInfo>(std::bind(&WithStreamedUnaryMethod_keepAliveShort<BaseClass>::StreamedkeepAliveShort, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_keepAliveShort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status keepAliveShort(::grpc::ServerContext* context, const ::singleuseronline::LoginInfo* request, ::singleuseronline::ResultInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedkeepAliveShort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::singleuseronline::LoginInfo,::singleuseronline::ResultInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_signUp<WithStreamedUnaryMethod_keepAliveShort<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_signUp<WithStreamedUnaryMethod_keepAliveShort<Service > > StreamedService;
};

}  // namespace singleuseronline


#endif  // GRPC_single_5fuser_5fonline_2eproto__INCLUDED
